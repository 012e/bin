#!/usr/bin/python3
from re import sub
import subprocess
import sys
import os
from abc import abstractmethod, ABC
from typing import override



def is_wayland() -> bool:
    return os.environ["XDG_SESSION_TYPE"] == "wayland"


def get_screen_name() -> str:
    return subprocess.getoutput("xrandr -q | grep \" connected\" | awk '{print $1}'")


SCREEN_NAME = get_screen_name()

class BrightnessSetter(ABC):

    @abstractmethod
    def _max_relative_brightness(self) -> float:
        pass

    @abstractmethod
    def _get_current_relative_brightness(self) -> float:
        pass

    def get_brightness(self) -> float:
        return self._get_current_relative_brightness() / self._max_relative_brightness()

    @abstractmethod
    def set_brightness(self, new_brightness: float):
        pass

    def increase_brightness(self, step: float):
        self.set_brightness(self.get_brightness() + step)

    def decrease_brightness(self, step: float):
        self.set_brightness(self.get_brightness() - step)

class WaylandBrightness(BrightnessSetter):
    @override
    def _max_relative_brightness(self) -> float:
        return int(subprocess.getoutput("brightnessctl max"))

    @override
    def _get_current_relative_brightness(self) -> float:
        return int(subprocess.getoutput("brightnessctl get"))

    @override
    def set_brightness(self, new_brightness: float):
        os.system(f"brightnessctl set {max(new_brightness * self._max_relative_brightness(), 0)}%")

class X11Brightness(BrightnessSetter):
    @override
    def _max_relative_brightness(self) -> float:
        return 1

    @override
    def _get_current_relative_brightness(self) -> float:
        return float(subprocess.getoutput("xrandr --verbose | grep -m 1 -i brightness | cut -f2 -d ' '"))

    @override
    def set_brightness(self, new_brightness: float):
        os.system(f'xrandr --output "{SCREEN_NAME}" --brightness "{max(new_brightness, 0)}"')

def notify(brightness: float):
    os.system(
        f'notify-send -a progress_bar -t 1000 -h int:value:{brightness*100} "Brightness"'
    )

def invalid_brightness(brightness: float) -> bool:
    return brightness < 0 or brightness > 1

def main():
    STEP = 0.1
    setter: BrightnessSetter

    if is_wayland():
        setter = WaylandBrightness()
    else:
        setter = X11Brightness()

    if len(sys.argv) == 1:
        print(setter._get_current_relative_brightness())
        exit(0)
    match sys.argv[1]:
        case "up":
            setter.increase_brightness(STEP)
            notify(setter.get_brightness())

        case "down":
            setter.decrease_brightness(STEP)
            notify(setter.get_brightness())

        case "set":
            if len(sys.argv) <= 2:
                print("Missing argument: new brightness")
                exit(1)
            new_brightness = float(sys.argv[2])
            if invalid_brightness(new_brightness):
                print("Invalid brightness: ", sys.argv[2])
                exit(1)
            setter.set_brightness(new_brightness)
        case _:
            print("Invalid action: ", sys.argv[1])
            exit(1)


if __name__ == "__main__":
    main()
